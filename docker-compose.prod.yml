version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=postgresql://resume_user:resume_password@postgres:5432/resume_scanner
      - SECRET_KEY=${SECRET_KEY}
      - ACCESS_TOKEN_EXPIRE_DAYS=7
      - OLLAMA_API=http://ollama:11434
      - OLLAMA_MODEL=llama3.2:3b
      - UPLOAD_DIR=./uploads/resumes
      - PROFILE_PHOTO_DIR=./uploads/profile_photos
      - MAX_FILE_SIZE=10485760
      - MAX_MONTHLY_SCANS=10
      - SMTP_HOST=${SMTP_HOST}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USERNAME=${SMTP_USERNAME}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - FROM_EMAIL=${FROM_EMAIL}
    volumes:
      - backend_uploads:/app/uploads
      - backend_logs:/app/logs
    depends_on:
      - postgres
      - ollama
    networks:
      - resume-scanner-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Frontend React App (Nginx)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    ports:
      - "80:80"
    environment:
      - REACT_APP_API_URL=${API_URL:-http://localhost:8000}
    depends_on:
      - backend
    networks:
      - resume-scanner-network
    restart: unless-stopped

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - resume-scanner-network
    restart: unless-stopped
    command: serve

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=resume_scanner
      - POSTGRES_USER=resume_user
      - POSTGRES_PASSWORD=resume_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - resume-scanner-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U resume_user -d resume_scanner"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - resume-scanner-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - frontend
      - backend
    networks:
      - resume-scanner-network
    restart: unless-stopped

volumes:
  ollama_data:
  postgres_data:
  redis_data:
  backend_uploads:
  backend_logs:

networks:
  resume-scanner-network:
    driver: bridge

