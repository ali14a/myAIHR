version: '3.8'

services:
  # Backend API Service
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - DATABASE_URL=sqlite:///./database/resume.db
      - SECRET_KEY=dev-secret-key-change-in-production
      - ACCESS_TOKEN_EXPIRE_DAYS=7
      - OLLAMA_API=http://ollama:11434
      - OLLAMA_MODEL=llama3.2:3b
      - UPLOAD_DIR=./uploads/resumes
      - PROFILE_PHOTO_DIR=./uploads/profile_photos
      - MAX_FILE_SIZE=10485760
      - MAX_MONTHLY_SCANS=10
    volumes:
      - ./backend:/app
      - ./backend/uploads:/app/uploads
      - ./backend/database:/app/database
      - ./backend/logs:/app/logs
    depends_on:
      - ollama
    networks:
      - resume-scanner-network
    restart: unless-stopped

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - NODE_ENV=development
      - PORT=3000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - resume-scanner-network
    restart: unless-stopped

  # Ollama AI Service
  ollama:
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0
    networks:
      - resume-scanner-network
    restart: unless-stopped
    command: serve

  # Database (PostgreSQL for production-like environment)
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_DB=resume_scanner
      - POSTGRES_USER=resume_user
      - POSTGRES_PASSWORD=resume_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - resume-scanner-network
    restart: unless-stopped

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - resume-scanner-network
    restart: unless-stopped

volumes:
  ollama_data:
  postgres_data:
  redis_data:

networks:
  resume-scanner-network:
    driver: bridge
